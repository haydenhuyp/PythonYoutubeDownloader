# -*- coding: utf-8 -*-
import shutil

import requests
import youtube_transcript_api
# Form implementation generated from reading ui file 'design.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, Qt
import pytube
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled
from youtube_transcript_api.formatters import Formatter
from youtube_transcript_api.formatters import SRTFormatter
import re

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 393)
        MainWindow.setMaximumSize(QtCore.QSize(1000, 1500))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setMaximumSize(QtCore.QSize(16777215, 200))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(28)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setMaximumSize(QtCore.QSize(1000, 700))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.page)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame_4 = QtWidgets.QFrame(self.page)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_2 = QtWidgets.QFrame(self.frame_4)
        self.frame_2.setMaximumSize(QtCore.QSize(16777215, 60))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.txtLink = QtWidgets.QTextEdit(self.frame_2)
        self.txtLink.setGeometry(QtCore.QRect(40, 0, 891, 58))
        self.txtLink.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.txtLink.setFont(font)
        self.txtLink.setObjectName("txtLink")
        self.verticalLayout_2.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.frame_4)
        self.frame_3.setMaximumSize(QtCore.QSize(16777215, 70))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.chkLowResolution = QtWidgets.QCheckBox(self.frame_3)
        self.chkLowResolution.setEnabled(True)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.chkLowResolution.setFont(font)
        self.chkLowResolution.setChecked(False)
        self.chkLowResolution.setObjectName("chkLowResolution")
        self.horizontalLayout_3.addWidget(self.chkLowResolution)
        self.chkAudio = QtWidgets.QCheckBox(self.frame_3)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.chkAudio.setFont(font)
        self.chkAudio.setObjectName("chkAudio")
        self.horizontalLayout_3.addWidget(self.chkAudio)
        self.chkDownloadCaption = QtWidgets.QCheckBox(self.frame_3)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.chkDownloadCaption.setFont(font)
        self.chkDownloadCaption.setObjectName("chkDownloadCaption")
        self.horizontalLayout_3.addWidget(self.chkDownloadCaption)
        self.chkDownloadThumbnail = QtWidgets.QCheckBox(self.frame_3)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.chkDownloadThumbnail.setFont(font)
        self.chkDownloadThumbnail.setObjectName("chkDownloadThumbnail")
        self.horizontalLayout_3.addWidget(self.chkDownloadThumbnail)
        self.verticalLayout_2.addWidget(self.frame_3)
        self.frame_5 = QtWidgets.QFrame(self.frame_4)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_2.setContentsMargins(-1, 30, -1, -1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.btnClear = QtWidgets.QPushButton(self.frame_5)
        self.btnClear.setMaximumSize(QtCore.QSize(150, 16777215))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.btnClear.setFont(font)
        self.btnClear.setStyleSheet("QPushButton{\n"
"cursor: pointer;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: Gray;\n"
"}")
        self.btnClear.setObjectName("btnClear")
        self.horizontalLayout_2.addWidget(self.btnClear)
        self.btnDownload = QtWidgets.QPushButton(self.frame_5)
        self.btnDownload.setMaximumSize(QtCore.QSize(150, 16777215))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.btnDownload.setFont(font)
        self.btnDownload.setStyleSheet("QPushButton{\n"
"font: 75 16pt \"Arial\";\n"
"background-color: DodgerBlue;\n"
"color: white;\n"
"cursor: pointer;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: RoyalBlue;\n"
"}")
        self.btnDownload.setObjectName("btnDownload")
        self.horizontalLayout_2.addWidget(self.btnDownload)
        self.verticalLayout_2.addWidget(self.frame_5)
        self.txtError = QtWidgets.QLineEdit(self.frame_4)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.txtError.setFont(font)
        self.txtError.setAutoFillBackground(False)
        self.txtError.setStyleSheet("background-color: rgba(0, 0, 0, 0); border: none; color: red;")
        self.txtError.setReadOnly(True)
        self.txtError.setPlaceholderText("")
        self.txtError.setObjectName("txtError")
        self.verticalLayout_2.addWidget(self.txtError)
        self.verticalLayout_3.addWidget(self.frame_4)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.page_2)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.progressBar = QtWidgets.QProgressBar(self.page_2)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.progressBar.setFont(font)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_4.addWidget(self.progressBar)
        self.txtStatus = QtWidgets.QTextEdit(self.page_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.txtStatus.setFont(font)
        self.txtStatus.setStyleSheet("background-color: rgba(0, 0, 0, 0); border: none; color:black;")
        self.txtStatus.setPlaceholderText("")
        self.txtStatus.setObjectName("txtStatus")
        self.verticalLayout_4.addWidget(self.txtStatus)
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.page_3)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.txtResult = QtWidgets.QLineEdit(self.page_3)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.txtResult.setFont(font)
        self.txtResult.setStyleSheet("background-color: rgba(0, 0, 0, 0); border: none; color: black;")
        self.txtResult.setPlaceholderText("")
        self.txtResult.setObjectName("txtResult")
        self.verticalLayout_5.addWidget(self.txtResult)
        self.frame = QtWidgets.QFrame(self.page_3)
        self.frame.setMaximumSize(QtCore.QSize(16777215, 100))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.btnOpenDownloadFolder = QtWidgets.QPushButton(self.frame)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btnOpenDownloadFolder.setFont(font)
        self.btnOpenDownloadFolder.setObjectName("btnOpenDownloadFolder")
        self.horizontalLayout.addWidget(self.btnOpenDownloadFolder)
        self.btnBackToHomePage = QtWidgets.QPushButton(self.frame)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btnBackToHomePage.setFont(font)
        self.btnBackToHomePage.setObjectName("btnBackToHomePage")
        self.horizontalLayout.addWidget(self.btnBackToHomePage)
        self.verticalLayout_5.addWidget(self.frame)
        self.stackedWidget.addWidget(self.page_3)
        self.verticalLayout.addWidget(self.stackedWidget, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # man-made code
        self.btnClear.clicked.connect(lambda: self.clearButton_onclick())
        self.btnDownload.clicked.connect(lambda: self.downloadButton_onclick())

        self.chkLowResolution.stateChanged.connect(self.on_low_resolution_changed)
        self.chkAudio.stateChanged.connect(self.on_audio_changed)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "YOUTUBE DOWNLOADER"))
        self.txtLink.setPlaceholderText(_translate("MainWindow", "Enter Youtube Link(s) Here, Separated by Comma"))
        self.chkLowResolution.setText(_translate("MainWindow", "Low Resolution"))
        self.chkAudio.setText(_translate("MainWindow", "Audio Only"))
        self.chkDownloadCaption.setText(_translate("MainWindow", "Download Caption"))
        self.chkDownloadThumbnail.setText(_translate("MainWindow", "Download Thumbnail"))
        self.btnClear.setText(_translate("MainWindow", "Clear"))
        self.btnDownload.setText(_translate("MainWindow", "Download"))
        self.btnOpenDownloadFolder.setText(_translate("MainWindow", "Open Downloaded Folder"))
        self.btnBackToHomePage.setText(_translate("MainWindow", "Back To Home Page"))

    def clearButton_onclick(self):
        self.chkLowResolution.setChecked(False)
        self.chkAudio.setChecked(False)
        self.chkDownloadCaption.setChecked(False)
        self.chkDownloadThumbnail.setChecked(False)
        self.txtLink.setText("")
        self.txtError.setText("")

    def on_low_resolution_changed(self):
        low_res_state = self.chkLowResolution.isChecked()
        if low_res_state:
            self.chkAudio.setEnabled(False)
        elif not low_res_state:
            self.chkAudio.setEnabled(True)
    def on_audio_changed(self):
        audio_state = self.chkAudio.isChecked()
        if audio_state:
            self.chkLowResolution.setEnabled(False)
        elif not audio_state:
            self.chkLowResolution.setEnabled(True)



    def downloadButton_onclick(self):
        link = self.txtLink.toPlainText()
        # TODO: process YouTube links, validate it
        youtube_regex = r'^https?://(?:www\.)?youtube\.com/watch\?(?=.*v=\w+)(?:\S+)?$'

        # Check if the link matches the YouTube regex pattern
        if not re.match(youtube_regex, link):
            self.txtError.setText("Youtube link is not valid")
        else:
            low_resolution = self.chkLowResolution.isChecked()
            audio_only = self.chkAudio.isChecked()
            download_caption = self.chkDownloadCaption.isChecked()
            download_thumbnail = self.chkDownloadThumbnail.isChecked()

            link = self.txtLink.toPlainText()
            yt = pytube.YouTube(link)
            title = yt.title

            # TODO: process all check boxes

            self.stackedWidget.setCurrentWidget(self.page_2)
            self.txtStatus.setText(f"Downloading: {title}")
            # highest or lowest solution
            if low_resolution:
                yt.streams.get_lowest_resolution().download()
            else:
                yt.streams.get_highest_resolution().download()
            # audio only
            if audio_only and not low_resolution:
                yt.streams.get_audio_only().download()

            # caption
            if download_caption:
                try:
                    transcript = YouTubeTranscriptApi.get_transcript("qVtsMOCYYWk", languages=['en'])

                    # in text format
                    file = open('subtitle.txt', 'w')
                    for line in transcript:
                        file.write(line['text'] + '\n')
                    file.close()

                    # in srt format
                    formatter = SRTFormatter()
                    srt_formatted = formatter.format_transcript(transcript)
                    with open('subtitle.srt', 'w', encoding='utf-8') as srt_file:
                        srt_file.write(srt_formatted)
                except TranscriptsDisabled:
                    self.txtResult.setText("Caption is not supported for this video")
                except:
                    print("Errors in Subtitle File")

            # thumbnail
            if download_thumbnail:
                image_url = yt.thumbnail_url
                r = requests.get(image_url, stream=True)
                filename = image_url.split("/")[-1]
                if r.status_code == 200:
                    # Set decode_content value to True, otherwise the downloaded image file's size will be zero.
                    r.raw.decode_content = True

                    # Open a local file with wb ( write binary ) permission.
                    with open(filename, 'wb') as f:
                        shutil.copyfileobj(r.raw, f)
                    self.txtResult.setText('Thumbnail Image sucessfully Downloaded')
                else:
                    self.txtResult.setText('Thumbnail Image Couldn\'t be retreived')

            # https://stackoverflow.com/questions/148963/keeping-guis-responsive-during-long-running-tasks
            self.stackedWidget.setCurrentWidget(self.page_3)
            self.txtResult.setReadOnly(True)
            self.txtResult.setText("Downloaded Successfully.")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
